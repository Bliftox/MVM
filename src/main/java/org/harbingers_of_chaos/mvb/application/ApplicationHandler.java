package org.harbingers_of_chaos.mvb.application;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.entities.UserSnowflake;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.events.interaction.ModalInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.ActionRow;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import net.dv8tion.jda.api.interactions.components.text.TextInput;
import net.dv8tion.jda.api.interactions.components.text.TextInputStyle;
import net.dv8tion.jda.api.interactions.modals.Modal;

import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.Date;

import static org.harbingers_of_chaos.mvb.Main.*;

public class ApplicationHandler extends ListenerAdapter {
    private static String userId;
    private static String user;
    private static String reason;
    private static TextChannel applicationsChat;
    private static TextChannel applicationsLogChat;
    public static SimpleDateFormat format = new SimpleDateFormat(" HH:mm  dd/MM/yyyy");
    public static Date date = new Date();

    @Override
    public void onModalInteraction(ModalInteractionEvent event) {
        try {
            if (event.getModalId().equals("application")) {
                String nickname = event.getValue("nickname").getAsString();
                String years = event.getValue("years").getAsString();
                String sex = event.getValue("sex").getAsString();
                String bio = event.getValue("bio").getAsString();
                String whyWe = event.getValue("whyWe").getAsString();
                applicationsChat = jda.getTextChannelById("1189996402164629575");

                user = event.getUser().getName();
                userId = String.valueOf(event.getUser().getIdLong());

                if (applicationsChat != null) {
                    EmbedBuilder applicationEmbed = new EmbedBuilder();
                    applicationEmbed.setImage("https://cdn.discordapp.com/attachments/991951225962639524/1189687904415535195/-27-12-2023_8.png?ex=659f1233&is=658c9d33&hm=7b814ffffdfae944045e1df19636c44494fa4f380c9228cd1090a8dd9c0dc8b8&");
                    applicationEmbed.setTitle("–ó–∞—è–≤–∫–∞ ‚Ññ" + check + " –æ—Ç " + user, null);
                    applicationEmbed.setColor(new Color(0xCB3966));
                    applicationEmbed.setDescription(
                            "### üéÄ –ù–∏–∫ –≤ –∏–≥—Ä–µ: \n```" + nickname +
                                    "```\n### üß≠ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? \n```" + years +
                                    "```\n### üé® –í–∞—à –ø–æ–ª: \n```" + sex +
                                    "```\n### üìï –†–æ—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ: \n```" + bio +
                                    "```\n### üíö –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä? \n```" + whyWe + "```");
                    applicationEmbed.setFooter("–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ " + format.format(date) + "  \nAppID: " + userId);

                    event.reply("–ó–∞—è–≤–∫–∞ ‚Ññ" + check + " —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! üéÑ").setEphemeral(true).queue();

                    applicationsChat.sendMessage("<@&1189667213318295606>" + " <@" + userId + ">").setEmbeds(applicationEmbed.build()).addActionRow(
                            Button.success(userId, "‚úÖ –ü—Ä–∏–Ω—è—Ç—å"),
                            Button.secondary(userId + 1, "‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å –ø—Ä–∏—á–∏–Ω–æ–π"),
                            Button.danger(userId + 2, "üõë –û—Ç–∫–ª–æ–Ω–∏—Ç—å")
                    ).queue();


                    log.info("Application ‚Ññ" + check + " created access");
                } else {
                    log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª.");
                }
                check++;

            }
        } catch (Exception e) {
            log.warning("Error application: " + e);
            event.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! ‚õî").setEphemeral(true).queue();
        }
    }

    @Override
    public void onButtonInteraction(ButtonInteractionEvent event) {
        /*                       –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ                           */
        if (event.getComponentId().equals("Hello")) {

            TextInput nickname = TextInput.create("nickname", "[üéÄ] –ù–∏–∫ –≤ –∏–≥—Ä–µ:", TextInputStyle.SHORT)
                    .setPlaceholder("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ –∏–≥—Ä–µ")
                    .setMinLength(3)
                    .setMaxLength(15)
                    .build();

            TextInput years = TextInput.create("years", "[üß≠] –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", TextInputStyle.SHORT)
                    .setPlaceholder("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç")
                    .setMinLength(1)
                    .setMaxLength(2)
                    .setRequired(true)
                    .build();

            TextInput sex = TextInput.create("sex", "[üé®] –í–∞—à –ø–æ–ª:", TextInputStyle.SHORT)
                    .setPlaceholder("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª")
                    .setMinLength(1)
                    .setMaxLength(10)
                    .setRequired(true)
                    .build();

            TextInput bio = TextInput.create("bio", "[üìï] –†–æ—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:", TextInputStyle.PARAGRAPH)
                    .setPlaceholder("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ: —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å, –∫–∞–∫–∏–µ —É –≤–∞—Å —É–≤–ª–µ—á–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã?")
                    .setMinLength(1)
                    .setMaxLength(200)
                    .setRequired(true)
                    .build();

            TextInput whyWe = TextInput.create("whyWe", "[üíö] –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä?", TextInputStyle.SHORT)
                    .setPlaceholder("–ß–µ–º –≤–∞–º –ø—Ä–∏–≥–ª—è–Ω—É–ª—Å—è –Ω–∞—à —Å–µ—Ä–≤–µ—Ä?")
                    .setMinLength(1)
                    .setMaxLength(100)
                    .setRequired(true)
                    .build();

            Modal modal = Modal.create("application", "–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä MystiVerse")
                    .addComponents(ActionRow.of(nickname), ActionRow.of(years), ActionRow.of(sex), ActionRow.of(bio), ActionRow.of(whyWe))
                    .build();

            event.replyModal(modal).queue();

        }
        Guild guild = event.getGuild();

        Role accessRole = guild.getRoleById("1160295664668913816");
        Role rejectedRole = guild.getRoleById("1190023047822974996");

        applicationsLogChat = jda.getTextChannelById("1189900614226944110");

        try {
            String authorId = event.getButton().getId();
            
            if (event.getComponent().getLabel().equals("‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å –ø—Ä–∏—á–∏–Ω–æ–π")) {
                log.info("Application ‚Ññ" + check + " rejected with reason");
                if (authorId != null) {
                    try {
                        guild.addRoleToMember(UserSnowflake.fromId(authorId), rejectedRole).queue();

                        EmbedBuilder applicationsLog = new EmbedBuilder();
                        applicationsLog.setTitle("–ó–∞—è–≤–∫–∞ ‚Ññ" + check + " –æ—Ç Id:" + authorId, null);
                        applicationsLog.setColor(new Color(0xFAD000));
                        applicationsLog.setDescription(
                                "### ‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å –ø—Ä–∏—á–∏–Ω–æ–π" + "\n –ü—Ä–∏—á–∏–Ω–∞: " + reason);
                        applicationsLog.setFooter("–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ " + format.format(date) + "  \nAppID: " + authorId);

                        log.info(event.getMessage().getId());


                        TextInput reason = TextInput.create("reason", "[üÉè] –ü—Ä–∏—á–∏–Ω–∞:", TextInputStyle.PARAGRAPH)
                                .setPlaceholder("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã")
                                .setMinLength(1)
                                .setMaxLength(250)
                                .setRequired(true)
                                .build();
                        Modal reasonModal = Modal.create("reasonModal", "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã")
                                .addComponents(ActionRow.of(reason))
                                .build();
                        event.replyModal(reasonModal).queue();

                        if (reason != null) {
                            event.reply("–ó–∞—è–≤–∫–∞ ‚Ññ" + check + " —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! üéÑ").setEphemeral(true).queue();
                            log.info("deleete");
                            applicationsLogChat.sendMessage("<@" + authorId + ">").setEmbeds(applicationsLog.build()).queue();
                        } else {
                            return;
                        }

                    } catch (Exception e) {
                        log.warning("Rejected with reason application error: " + e);
                    }
                } else {
                    log.warning("id null");
                    return;
                }
            }
        } catch (Exception e) {
        log.warning("tyt "+ e);
        }


        try {
            //–ø–æ–ª—É—á–∞–µ—Ç –∞–π–¥–∏ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª–∏

            
            if (event.getComponent().getLabel().equals("‚úÖ –ü—Ä–∏–Ω—è—Ç—å")) {
                Long authorId = Long.valueOf(event.getButton().getId());
                log.info("Application ‚Ññ" + check + " access");
                if (authorId != null) {
                    try {
                        guild.addRoleToMember(UserSnowflake.fromId(authorId), accessRole).queue();

                        EmbedBuilder applicationsLog = new EmbedBuilder();
                        applicationsLog.setTitle("–ó–∞—è–≤–∫–∞ ‚Ññ" + check + " –æ—Ç Id:" + authorId, null);
                        applicationsLog.setColor(new Color(0x0bda51));
                        applicationsLog.setDescription(
                                "### ‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ");
                        applicationsLog.setFooter("–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ " + format.format(date) + "  \nAppID: " + authorId);

                        applicationsLogChat.sendMessage("<@" + authorId + ">").setEmbeds(applicationsLog.build()).queue();

                        event.getChannel().deleteMessageById(event.getMessage().getId()).queue();

                        log.info(event.getMessage().getId());
                    } catch (Exception e) {
                        log.warning("Access application error: " + e);
                    }
                } else {
                    log.warning("id null");
                    return;
                }
            }
        } catch (Exception e) {
            log.warning("Application warning: " + e);
            return;
        }
    }
}


